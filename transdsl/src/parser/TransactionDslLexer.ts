// Generated from grammar/TransactionDsl.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class TransactionDslLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly ID = 5;
	public static readonly WS = 6;
	public static readonly NEWLINE = 7;
	public static readonly COMMENT = 8;
	public static readonly LINE_COMMENT = 9;
	public static readonly NATURAL_NUM = 10;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "ID", "WS", "NEWLINE", "COMMENT", "LINE_COMMENT", 
		"ID_LETTER", "DIGIT", "NATURAL_NUM",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'transaction'", "'{'", "'}'", "'procedure'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "ID", "WS", "NEWLINE", 
		"COMMENT", "LINE_COMMENT", "NATURAL_NUM",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TransactionDslLexer._LITERAL_NAMES, TransactionDslLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TransactionDslLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(TransactionDslLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "TransactionDsl.g4"; }

	// @Override
	public get ruleNames(): string[] { return TransactionDslLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return TransactionDslLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return TransactionDslLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return TransactionDslLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\fy\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06" +
		"\x03\x06\x03\x06\x07\x069\n\x06\f\x06\x0E\x06<\v\x06\x03\x07\x06\x07?" +
		"\n\x07\r\x07\x0E\x07@\x03\x07\x03\x07\x03\b\x03\b\x03\b\x07\bH\n\b\f\b" +
		"\x0E\bK\v\b\x03\b\x03\b\x03\b\x05\bP\n\b\x06\bR\n\b\r\b\x0E\bS\x03\t\x03" +
		"\t\x03\t\x03\t\x07\tZ\n\t\f\t\x0E\t]\v\t\x03\t\x03\t\x03\t\x03\t\x03\t" +
		"\x03\n\x03\n\x03\n\x03\n\x07\nh\n\n\f\n\x0E\nk\v\n\x03\n\x03\n\x03\v\x03" +
		"\v\x03\f\x03\f\x03\r\x03\r\x07\ru\n\r\f\r\x0E\rx\v\r\x03[\x02\x02\x0E" +
		"\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02" +
		"\t\x11\x02\n\x13\x02\v\x15\x02\x02\x17\x02\x02\x19\x02\f\x03\x02\x05\x04" +
		"\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x05\x02C\\aac|\x02\x81\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x03\x1B\x03\x02\x02\x02\x05\'\x03\x02\x02\x02\x07)\x03\x02\x02\x02" +
		"\t+\x03\x02\x02\x02\v5\x03\x02\x02\x02\r>\x03\x02\x02\x02\x0FQ\x03\x02" +
		"\x02\x02\x11U\x03\x02\x02\x02\x13c\x03\x02\x02\x02\x15n\x03\x02\x02\x02" +
		"\x17p\x03\x02\x02\x02\x19r\x03\x02\x02\x02\x1B\x1C\x07v\x02\x02\x1C\x1D" +
		"\x07t\x02\x02\x1D\x1E\x07c\x02\x02\x1E\x1F\x07p\x02\x02\x1F \x07u\x02" +
		"\x02 !\x07c\x02\x02!\"\x07e\x02\x02\"#\x07v\x02\x02#$\x07k\x02\x02$%\x07" +
		"q\x02\x02%&\x07p\x02\x02&\x04\x03\x02\x02\x02\'(\x07}\x02\x02(\x06\x03" +
		"\x02\x02\x02)*\x07\x7F\x02\x02*\b\x03\x02\x02\x02+,\x07r\x02\x02,-\x07" +
		"t\x02\x02-.\x07q\x02\x02./\x07e\x02\x02/0\x07g\x02\x0201\x07f\x02\x02" +
		"12\x07w\x02\x0223\x07t\x02\x0234\x07g\x02\x024\n\x03\x02\x02\x025:\x05" +
		"\x15\v\x0269\x05\x15\v\x0279\x05\x17\f\x0286\x03\x02\x02\x0287\x03\x02" +
		"\x02\x029<\x03\x02\x02\x02:8\x03\x02\x02\x02:;\x03\x02\x02\x02;\f\x03" +
		"\x02\x02\x02<:\x03\x02\x02\x02=?\t\x02\x02\x02>=\x03\x02\x02\x02?@\x03" +
		"\x02\x02\x02@>\x03\x02\x02\x02@A\x03\x02\x02\x02AB\x03\x02\x02\x02BC\b" +
		"\x07\x02\x02C\x0E\x03\x02\x02\x02DH\x05\r\x07\x02EH\x05\x11\t\x02FH\x05" +
		"\x13\n\x02GD\x03\x02\x02\x02GE\x03\x02\x02\x02GF\x03\x02\x02\x02HK\x03" +
		"\x02\x02\x02IG\x03\x02\x02\x02IJ\x03\x02\x02\x02JO\x03\x02\x02\x02KI\x03" +
		"\x02\x02\x02LM\x07\x0F\x02\x02MP\x07\f\x02\x02NP\x07\f\x02\x02OL\x03\x02" +
		"\x02\x02ON\x03\x02\x02\x02PR\x03\x02\x02\x02QI\x03\x02\x02\x02RS\x03\x02" +
		"\x02\x02SQ\x03\x02\x02\x02ST\x03\x02\x02\x02T\x10\x03\x02\x02\x02UV\x07" +
		"1\x02\x02VW\x07,\x02\x02W[\x03\x02\x02\x02XZ\v\x02\x02\x02YX\x03\x02\x02" +
		"\x02Z]\x03\x02\x02\x02[\\\x03\x02\x02\x02[Y\x03\x02\x02\x02\\^\x03\x02" +
		"\x02\x02][\x03\x02\x02\x02^_\x07,\x02\x02_`\x071\x02\x02`a\x03\x02\x02" +
		"\x02ab\b\t\x02\x02b\x12\x03\x02\x02\x02cd\x071\x02\x02de\x071\x02\x02" +
		"ei\x03\x02\x02\x02fh\n\x03\x02\x02gf\x03\x02\x02\x02hk\x03\x02\x02\x02" +
		"ig\x03\x02\x02\x02ij\x03\x02\x02\x02jl\x03\x02\x02\x02ki\x03\x02\x02\x02" +
		"lm\b\n\x02\x02m\x14\x03\x02\x02\x02no\t\x04\x02\x02o\x16\x03\x02\x02\x02" +
		"pq\x042;\x02q\x18\x03\x02\x02\x02rv\x043;\x02su\x05\x17\f\x02ts\x03\x02" +
		"\x02\x02ux\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02w\x1A\x03" +
		"\x02\x02\x02xv\x03\x02\x02\x02\r\x028:@GIOS[iv\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TransactionDslLexer.__ATN) {
			TransactionDslLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TransactionDslLexer._serializedATN));
		}

		return TransactionDslLexer.__ATN;
	}

}

